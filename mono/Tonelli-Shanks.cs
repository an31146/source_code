using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Diagnostics;
using System.Numerics;
using System.Threading.Tasks;

using static System.Numerics.BigInteger;

namespace TonelliShanks {
    class Solution {
        private readonly BigInteger root1, root2;
        private readonly bool exists;
 
        public Solution(BigInteger root1, BigInteger root2, bool exists) {
            this.root1 = Min(root1, root2);
            this.root2 = Max(root1, root2);
            this.exists = exists;
        }
 
        public BigInteger Root1() {
            return root1;
        }
 
        public BigInteger Root2() {
            return root2;
        }
 
        public bool Exists() {
            return exists;
        }
    }
 
	class TupleComparer : IComparer<Tuple<int, uint>>
	{
		public int Compare(Tuple<int, uint> A, Tuple<int, uint> B)
		{
			if (A.Item2 < B.Item2)
				return -1;
			if (A.Item2 > B. Item2)
				return 1;
			else
				return 0;
		}
	}
 
    class Program {
		static uint[] primes = new uint[] {
			   2,   3,   5,  11,  13,  17,  19,  23,  29,  31,  37,  41,  43,  47,  53,  59,  61,  67,  71,  73,  83,  87,  89,  91,  97,
			 101, 103, 107, 109, 113, 127, 131, 139, 163, 167, 173, 179, 191, 193, 197, 199, 211, 
			 229, 233, 257, 263, 269, 277, 281, 283, 307, 313, 317, 331, 337, 347, 349, 353, 373, 383, 389, 401, 419, 421, 
			 431, 433, 449, 463, 487, 491, 499, 509, 523, 569, 571, 577, 587, 593, 613, 619, 631, 653, 659, 661, 673, 677, 
			 683, 701, 733, 739, 743, 751, 761, 769, 787, 809, 811, 823, 829, 853, 859, 877, 881, 887, 911, 929, 953, 967, 
			 983, 991,1013,1021,1031,1049,1051,1091,1103,1151,1153,1171,1181,1201,1223,1229,1231,1249,1283,1301,1361,1367,
			1381,1399,1427,1433,1447,1451,1459,1471,1483,1493,1543,1549,1559,1567,1571,1607,1609,1621,1627,1637,1657,1667,
			1699,1721,1723,1741,1759,1777,1783,1787,1831,1861,1877,1879,1889,1901,1907,1931,1951,1973,1987,1997,1999,2003,
			2027,2029,2039,2063,2083,2111,2129,2131,2141,2143,2179,2213,2221,2237,2243,2269,2273,2281,2293,2297,2309,2311,
			2333,2347,2351,2399,2411,2417,2423,2437,2441,2447,2473,2521,2543,2549,2551,2609,2617,2633,2663,2693,2707,2711,
			2713,2729,2731,2741,2749,2753,2767,2803,2833,2837,2843,2851,2857,2861,2887,2909,2927,2939,2963,2999,3011,3019,
			3023,3037,3049,3067,3079,3083,3089,3109,3137,3167,3229,3251,3253,3271,3301,3307,3319,3323,3343,3359,3371
    	};

		static uint[] primes1 = new uint[] {
		2,      5,      7,      19,     23,     31,     37,     41,     43,     53,     59,     67,     73,     79,     101,    103,    127,    131,    149,    179,    191,    199,    211,    223,   
		233,    251,    257,    269,    271,    283,    293,    311,    317,    359,    421,    431,    433,    457,    463,    479,    491,    523,    541,    563,    569,    571,    577,    599,
		607,    619,    631,    643,    647,    653,    659,    677,    683,    739,    751,    787,    797,    809,    811,    821,    829,    863,    877,    881,    887,    929,    937,    941,
		947,    953,    971,    977,    991,    997,    1009,   1019,   1021,   1031,   1051,   1061,   1069,   1093,   1103,   1109,   1129,   1153,   1201,   1217,   1223,   1229,   1231,   1237,
		1249,   1259,   1279,   1283,   1289,   1291,   1303,   1307,   1319,   1327,   1361,   1373,   1399,   1427,   1439,   1447,   1451,   1453,   1459,   1487,   1499,   1531,   1553,   1559,
		1571,   1583,   1607,   1609,   1621,   1627,   1663,   1667,   1669,   1697,   1699,   1709,   1733,   1759,   1777,   1789,   1801,   1823,   1831,   1847,   1867,   1871,   1873,   1879,
		1889,   1901,   1933,   1949,   1951,   1973,   1987,   1999,   2003,   2017,   2053,   2063,   2081,   2111,   2113,   2131,   2141,   2143,   2153,   2207,   2213,   2221,   2237,   2267,
		2273,   2281,   2287,   2309,   2333,   2339,   2341,   2351,   2357,   2377,   2417,   2423,   2473,   2477,   2521,   2539,   2543,   2549,   2551,   2557,   2609,   2617,   2621,   2647,
		2659,   2663,   2687,   2689,   2707,   2713,   2719,   2731,   2741,   2749,   2767,   2789,   2797,   2803,   2833,   2837,   2843,   2857,   2861,   2897,   2909,   2927,   2939,   2957,
		2969,   2999,   3001,   3011,   3019,   3023,   3037,   3049,   3061,   3079,   3089,   3119,   3137,   3181,   3203,   3209,   3217,   3221,   3257,   3299,   3313,   3319,   3331,   3343,
		3347,   3359,   3371,   3373,   3391,   3413,   3449,   3457,   3461,   3467,   3469,   3491,   3499,   3517,   3529,   3541,   3547,   3559,   3581,   3593,   3617,   3623,   3631,   3637,
		3659,   3673,   3701,   3709,   3719,   3733,   3739,   3767,   3793,   3797,   3803,   3821,   3833,   3853,   3863,   3877,   3881,   3889,   3911,   3917,   3919,   3923,   3943,   3967,
		3989,   4001,   4007,   4021,   4027,   4049,   4051,   4079,   4091,   4099,   4133,   4139,   4153,   4157,   4159,   4177,   4201,   4211,   4217,   4229,   4231,   4253,   4271,   4273,
		4289,   4337,   4357,   4391,   4409,   4421,   4441,   4447,   4451,   4463,   4481,   4493,   4507,   4513,   4549,   4567,   4583,   4597,   4621,   4643,   4651,   4663,   4679,   4691,
		4721,   4729,   4733,   4783,   4813,   4877,   4889,   4909,   4919,   4937,   4951,   4967,   4969,   4973,   4993,   5009,   5023,   5039,   5059,   5077,   5081,   5099,   5119,   5147,
		5153,   5167,   5179,   5189,   5197,   5227,   5231,   5233,   5237,   5261,   5273,   5279,   5297,   5303,   5309,   5323,   5347,   5393,   5399,   5407,   5413,   5471,   5479,   5483,
		5501,   5519,   5527,   5557,   5573,   5591,   5639,   5641,   5647,   5651,   5653,   5659,   5689,   5693,   5711,   5749,   5783,   5807,   5813,   5827,   5839,   5857,   5867,   5881,
		5923,   5981,   5987,   6029,   6037,   6047,   6101,   6113,   6131,   6143,   6151,   6163,   6197,   6203,   6211,   6217,   6221,   6257,   6271,   6299,   6317,   6329,   6337,   6343,
		6361,   6389,   6397,   6427,   6449,   6451,   6469,   6491,   6521,   6547,   6551,   6563,   6569,   6577,   6599,   6619,   6673,   6679,   6689,   6701,   6709,   6763,   6781,   6791,
		6793,   6829,   6833,   6857,   6863,   6883,   6899,   6917,   6949,   6959,   6977,   6997,   7013,   7019,   7027,   7039,   7057,   7069,   7079,   7109,   7121,   7127,   7151,   7207,
		7219,   7243,   7247,   7283,   7297,   7307,   7309,   7331,   7349,   7351,   7411,   7433,   7457,   7477,   7499,   7507,   7547,   7549,   7559,   7561,   7573,   7591,   7603,   7607,
		7639,   7649,   7669,   7681,   7691,   7717,   7723,   7757,   7759,   7793,   7817,   7841,   7867,   7879,   7883,   7919,   7933,   7949,   7963,   8011,   8039,   8053,   8069,   8089,
		8123,   8167,   8179,   8191,   8209,   8219,   8221,   8233,   8237,   8243,   8263,   8269,   8293,   8297,   8311,   8387,   8389,   8431,   8443,   8447,   8513,   8521,   8537,   8543,
		8573,   8623,   8641,   8681,   8699,   8731,   8741,   8753,   8807,   8819,   8821,   8849,   8863,   8887,   8893,   8933,   8941,   8951,   8963,   8969,   8971,   9013,   9041,   9067,
		9109,   9127,   9133,   9157,   9161,   9173,   9199,   9203,   9221,   9277,   9283,   9293,   9311,   9323,   9337,   9341,   9371,   9377,   9391,   9419,   9433,   9467,   9479,   9497,
		9587,   9601,   9613,   9619,   9623,   9649,   9661,   9689,   9697,   9719,   9739,   9743,   9767,   9787,   9811,   9851,   9857,   9859,   9871,   9901,   9931,   9949,   9973,  10009,
		10037,  10039,  10061,  10067,  10069,  10079,  10091,  10093,  10103,  10111,  10133,  10141,  10159,  10163,  10169,  10193,  10243,  10247,  10259,  10267,  10271,  10289,  10301, 10303,
		10321,  10333,  10343,  10357,  10369,  10391,  10399,  10427,  10429,  10433,  10457,  10463,  10499,  10501,  10513,  10531,  10559,  10589,  10597,  10631,  10651,  10667,  10691,  10709,
		10711,  10733,  10753,  10789,  10799,  10837,  10853,  10861,  10903,  10949,  11057,  11059,  11069,  11093,  11117,  11119,  11131,  11149,  11159,  11161,  11171,  11173,  11213,  11257, 
		11261,  11273,  11287,  11317,  11321,  11351,  11423,  11443,  11447,  11471,  11483,  11489,  11503,  11519,  11587,  11617,  11657,  11677,  11681,  11689,  11699,  11701,  11719,  11789, 
		11821,  11827,  11831,  11833,  11863,  11887,  11897,  11927,  11939,  11969,  11971,  11981,  11987,  12011,  12037,  12071,  12101,  12107,  12119,  12149,  12157,  12163,  12203,  12211, 
		12251,  12263,  12277,  12301,  12323,  12329,  12347,  12391,  12401,  12409,  12433,  12437,  12451,  12473,  12491,  12497,  12511,  12517,  12527,  12539,  12541,  12547,  12569,  12583, 
		12589,  12613,  12619,  12641,  12647,  12653,  12671,  12689,  12697,  12713,  12739,  12757,  12781,  12791,  12821,  12823,  12829,  12841,  12889,  12893,  12923,  12959,  12967,  12973, 
		12979,  12983,  13001,  13009,  13099,  13103,  13121,  13127,  13151,  13159,  13171,  13177,  13183,  13187,  13217,  13219,  13229,  13241,  13291,  13297,  13327,  13339,  13367,  13381, 
		13397,  13399,  13417,  13451,  13457,  13469,  13477,  13499,  13513,  13523,  13567,  13577,  13591,  13613,  13649,  13669,  13681,  13691,  13693,  13697,  13721,  13751,  13763,  13781, 
		13789,  13799,  13859,  13879,  13883,  13903,  13907,  13913,  13921,  13997,  14011,  14029,  14057,  14071,  14081,  14083,  14143,  14153,  14159,  14197,  14207,  14221,  14243,  14249, 
		14281,  14293,  14303,  14321,  14323,  14327,  14347,  14369,  14411,  14419,  14437,  14447,  14489,  14519,  14533,  14537,  14557,  14561,  14563,  14621,  14669,  14683,  14713,  14741, 
		14753,  14767,  14783,  14813,  14821,  14827,  14867,  14879,  14887,  14897,  14951,  14957,  14969,  14983,  15013,  15031,  15053,  15091,  15101,  15107,  15121,  15131,  15137,  15139, 
		15161,  15173,  15187,  15193,  15227,  15259,  15287,  15289,  15299,  15313,  15319,  15331,  15361,  15373,  15377,  15383,  15413,  15443,  15451,  15461,  15467,  15511,  15527,  15541, 
		15551,  15581,  15629,  15641,  15661,  15671,  15679,  15683,  15733,  15737,  15739,  15749,  15761,  15767,  15787,  15791,  15797,  15817,  15877,  15881,  15889,  15907,  15923,  15959, 
		15971,  16001,  16033,  16057,  16061,  16063,  16069,  16073,  16091,  16103,  16111,  16127,  16141,  16187,  16193,  16231,  16249,  16253,  16273,  16301,  16319,  16333,  16339,  16349, 
		16363,  16369,  16381,  16417,  16421,  16433,  16447,  16451,  16493,  16529,  16547,  16573,  16603,  16607,  16619,  16633,  16657,  16741,  16747,  16787,  16831,  16879,  16883,  16889, 
		16901,  16903,  16937,  16963,  16979,  16987,  17011,  17033,  17041,  17077,  17099,  17107,  17117,  17137,  17203,  17207,  17209,  17239,  17291,  17293,  17321,  17327,  17333,  17359, 
		17377,  17383,  17393,  17417,  17419,  17431,  17449,  17491,  17497,  17509,  17539,  17551,  17569,  17609,  17623,  17659,  17669,  17681,  17729,  17749,  17761,  17807,  17827,  17837, 
		17851,  17863,  17881,  17903,  17909,  17911,  17923,  17929,  17957,  17981,  18041,  18047,  18061,  18077,  18089,  18119,  18121,  18131,  18133,  18149,  18181,  18229,  18233,  18251, 
		18257,  18269,  18287,  18301,  18307,  18341,  18367,  18379,  18397,  18427,  18433,  18443,  18451,  18457,  18481,  18503,  18517,  18523,  18541,  18587,  18617,  18713,  18719,  18749, 
		18757,  18787,  18839,  18869,  18917,  18919,  18959,  18979,  19009,  19037,  19073,  19079,  19087,  19121,  19163,  19181,  19183,  19207,  19213,  19237,  19249,  19267,  19301,  19319, 
		19379,  19381,  19391,  19403,  19417,  19423,  19429,  19433,  19441,  19447,  19457,  19463,  19471,  19477,  19489,  19501,  19507,  19541,  19543,  19553,  19559,  19577,  19583,  19597, 
		19603,  19697,  19709,  19751,  19763,  19777,  19813,  19841,  19853,  19861,  19867,  19913,  19927,  20029,  20051,  20071,  20143,  20173,  20177,  20183,  20231,  20249,  20297,  20323, 
		20341,  20357,  20359,  20407,  20411,  20431,  20443,  20483,  20507,  20533,  20549,  20551,  20599,  20611,  20627,  20639,  20641,  20663,  20693,  20731,  20743,  20747,  20749,  20753, 
		20759,  20771,  20773,  20807,  20857,  20873,  20887,  20897,  20899,  20939,  20947,  20963,  21061,  21089,  21121,  21143,  21149,  21157,  21169,  21187,  21193,  21247,  21323,  21341, 
		21347,  21379,  21383,  21391,  21397,  21467,  21481,  21499,  21503,  21517,  21521,  21523,  21563,  21577,  21587,  21613,  21647,  21683,  21713,  21737,  21739,  21751,  21767,  21803, 
		21839,  21859,  21893,  21911,  21929,  21937,  21961,  21991,  22013,  22027,  22067,  22079,  22091,  22109,  22111,  22129,  22133,  22153,  22159,  22171,  22193,  22273,  22279,  22283, 
		22291,  22307,  22349,  22367,  22369,  22381,  22409,  22433,  22481,  22501,  22511,  22531,  22541,  22543,  22549,  22567,  22573,  22637,  22669,  22679,  22691,  22697,  22721,  22727, 
		22739,  22741,  22777,  22783,  22787,  22807,  22861,  22871,  22907,  22943,  22961,  22973,  22993,  23003,  23011,  23017,  23021,  23027,  23057,  23063,  23081,  23087,  23117,  23143, 
		23167,  23189,  23227,  23251,  23279,  23291,  23293,  23297,  23311,  23327,  23333,  23339,  23369,  23447,  23459,  23497,  23537,  23539,  23549,  23563,  23567,  23581,  23593,  23599, 
		23609,  23663,  23677,  23687,  23689,  23741,  23747,  23753,  23767,  23801,  23819,  23827,  23831,  23833,  23879,  23899,  23909,  23917,  23929,  23971,  23977,  23981,  23993,  24001, 
		24007,  24019,  24043,  24049,  24071,  24077,  24091,  24097,  24103,  24133,  24137,  24151,  24179,  24223,  24229,  24239,  24281,  24337,  24359,  24373,  24391,  24413,  24419,  24439, 
		24443,  24469,  24481,  24527,  24533,  24551,  24571,  24593,  24611,  24623,  24659,  24671,  24677,  24683,  24691,  24697,  24733,  24749,  24767,  24781,  24793,  24821,  24841,  24847, 
		24889,  24943,  24979,  24989,  25013,  25031,  25033,  25037,  25057,  25087,  25097,  25111,  25147,  25183,  25301,  25307,  25309,  25321,  25339,  25357,  25373,  25391,  25471,  25537, 
		25541,  25577,  25601,  25609,  25633,  25639,  25667,  25673,  25693,  25703,  25733,  25793,  25799,  25841,  25867,  25913,  25931,  25933,  25951,  25969,  25997,  25999,  26003,  26017, 
		26029,  26053,  26113,  26161,  26171,  26177,  26183,  26189,  26203,  26209,  26227,  26237,  26293,  26317,  26321,  26387,  26393,  26407,  26431,  26459,  26479,  26489,  26497,  26513, 
		26539,  26557,  26561,  26573,  26591,  26597,  26647,  26681,  26687,  26699,  26717,  26729,  26731,  26759,  26777,  26783,  26801,  26821,  26833,  26863,  26893,  26903,  26927,  26959, 
		26987,  27011,  27061,  27067,  27073,  27077,  27107,  27109,  27127,  27191,  27239,  27241,  27283,  27299,  27329,  27337,  27361,  27367,  27407,  27409,  27427,  27449,  27481,  27487, 
		27509,  27529,  27539,  27541,  27551,  27581,  27691,  27701,  27733,  27737,  27743,  27749,  27767,  27791,  27793,  27817,  27823,  27827,  27893,  27919,  27941,  27943,  27953,  27961, 
		28019,  28027,  28031,  28051,  28069,  28087,  28097,  28151,  28181,  28183,  28201,  28211,  28219,  28229,  28277,  28279,  28289,  28307,  28309,  28349,  28351,  28387,  28393,  28409, 
		28411,  28447,  28463,  28477,  28493,  28499,  28513,  28517,  28537,  28559,  28573,  28579,  28597,  28603,  28621,  28627,  28649,  28687,  28703,  28753,  28759,  28793,  28813,  28817, 
		28837,  28867,  28879,  28909,  28921,  28927,  28933,  28949,  28961,  29017,  29023,  29033,  29059,  29063,  29129,  29137,  29153,  29179,  29191,  29201,  29209,  29243,  29251,  29287, 
		29297,  29311,  29327,  29347,  29363,  29383,  29389,  29399,  29423,  29437,  29443,  29473,  29527,  29537,  29567,  29573,  29581,  29599,  29629,  29633,  29683,  29717,  29723,  29741, 
		29759,  29761,  29803,  29833,  29863,  29867,  29879,  29881,  29927,  29947,  29959,  29983,  30059,  30071,  30097,  30103,  30109,  30113,  30139,  30169,  30203,  30211,  30241,  30269, 
		30307,  30367,  30389,  30403,  30427,  30449,  30491,  30517,  30529,  30553,  30559,  30577,  30593,  30631,  30649,  30677,  30689,  30757,  30763,  30803,  30817,  30841,  30853,  30869, 
		30871,  30881,  30893,  30911,  30983,  31019,  31039,  31079,  31081,  31091,  31121,  31151,  31153,  31159,  31177,  31181,  31189,  31193,  31231,  31237,  31259,  31267,  31271,  31277, 
		31321,  31337,  31357,  31379,  31391,  31393,  31469,  31489,  31517,  31531,  31547,  31567,  31627,  31657,  31687,  31721,  31723,  31727,  31751,  31769,  31793,  31799,  31817,  31849, 
		31873,  31883,  31907,  31973,  32027,  32029,  32057,  32083,  32089,  32099,  32117,  32141,  32159,  32189,  32203,  32213,  32233,  32237,  32261,  32297,  32309,  32321,  32323,  32327, 
		32341,  32353,  32381,  32401,  32411,  32413,  32443,  32497,  32531,  32563,  32579,  32603,  32609,  32611,  32621,  32633,  32647,  32693,  32713,  32717,  32789,  32797,  32833,  32839, 
		32869,  32887,  32909,  32933,  32941,  32957,  32969,  32971,  32987,  33013,  33053,  33071,  33107,  33149,  33161,  33181,  33211,  33287,  33311,  33343,  33349,  33391,  33403,  33457, 
		33479,  33493,  33503,  33521,  33533,  33569,  33589,  33599,  33601,  33619,  33629,  33641,  33647,  33713,  33721,  33749,  33791,  33809,  33827,  33851,  33863,  33931,  33937,  33967, 
		34123,  34127,  34129,  34147,  34157,  34159,  34183,  34217,  34253,  34259,  34261,  34267,  34273,  34283,  34297,  34301,  34319,  34351,  34403,  34429,  34439,  34469,  34483,  34487, 
		34511,  34543,  34589,  34591,  34603,  34607,  34649,  34757,  34759,  34807,  34819,  34841,  34843,  34847,  34849,  34877,  34897,  34913,  34919,  34939,  34961,  35023,  35059,  35081, 
		35083,  35107,  35117,  35153,  35159,  35171,  35221,  35227,  35251,  35327,  35353,  35393,  35401,  35407,  35491,  35507,  35509,  35527,  35531,  35537,  35573,  35591,  35593,  35597, 
		35603,  35617,  35671,  35729,  35731,  35747,  35759,  35797,  35801,  35803,  35809,  35831,  35851,  35863,  35869,  35879,  35899,  35933,  35951,  35963,  35977,  35993,  36011,  36013, 
		36017,  36061,  36067,  36109,  36131,  36137,  36151,  36161,  36191,  36217,  36299,  36307,  36341,  36343,  36479,  36493,  36529,  36551,  36559,  36563,  36571,  36599,  36629,  36637, 
		36653,  36671,  36677,  36683,  36697,  36713,  36721,  36739,  36749,  36767,  36779,  36781,  36787,  36809,  36833,  36847,  36857,  36871,  36887,  36899,  36901,  36913,  36931,  36973, 
		36997,  37003,  37049,  37117,  37159,  37189,  37199,  37201,  37217,  37223,  37253,  37273,  37307,  37309,  37321,  37339,  37361,  37363,  37379,  37463,  37483,  37489,  37511,  37517, 
		37571,  37579,  37607,  37633,  37747,  37799,  37813,  37831,  37847,  37853,  37879,  37897,  37907,  37951,  37957,  37987,  37991,  37993,  38011,  38039,  38047,  38113,  38153,  38183, 
		38231,  38273,  38303,  38327,  38329,  38371,  38377,  38431,  38447,  38449,  38453,  38557,  38593,  38609,  38651,  38671,  38693,  38699,  38707,  38737,  38749,  38767,  38803,  38833, 
		38839,  38851,  38861,  38867,  38903,  38917,  38923,  38933,  38971,  38977,  39019,  39023,  39047,  39079,  39089,  39097,  39133,  39161,  39163,  39181,  39191,  39199,  39209,  39217, 
		39233,  39239,  39241,  39251,  39301,  39313,  39323,  39341,  39343,  39373,  39383,  39419,  39451,  39509,  39511,  39551,  39569,  39631,  39659,  39671,  39679,  39709,  39719,  39727, 
		39733,  39761,  39769,  39799,  39821,  39827,  39841,  39863,  39869,  39877,  39901,  39953,  39971,  39979,  39983,  40013,  40037,  40039,  40087,  40093,  40111,  40123,  40127,  40153, 
		40163,  40189,  40193,  40231,  40237,  40241,  40253,  40277,  40289,  40351,  40361,  40387,  40423,  40427,  40459,  40471,  40507,  40529,  40531,  40543,  40559,  40577,  40583,  40609, 
		40627,  40637,  40693,  40697,  40763,  40787,  40801,  40829,  40841,  40847,  40849,  40853,  40897,  40903,  40993,  41011,  41017,  41023,  41039,  41081,  41113,  41149,  41161,  41177, 
		41179,  41189,  41201,  41203,  41257,  41263,  41281,  41299,  41357,  41381,  41389,  41411,  41443,  41453,  41507,  41513,  41521,  41539,  41543,  41579,  41593,  41597,  41603,  41611, 
		41617,  41621,  41627,  41641,  41647,  41659,  41669,  41719,  41729,  41737,  41759,  41761,  41771,  41801,  41809,  41843,  41849,  41893,  41911,  41927,  41941,  41953,  41957,  41959, 
		41969,  42019,  42061,  42071,  42073,  42131,  42139,  42157,  42169,  42193,  42223,  42257,  42283,  42293,  42299,  42307,  42323,  42331,  42337,  42349,  42379,  42397,  42433,  42437, 
		42443,  42451,  42461,  42467,  42473,  42487,  42491,  42499,  42557,  42571,  42577,  42611,  42641,  42643,  42677,  42697,  42703,  42727,  42773,  42793,  42821,  42841,  42853,  42863, 
		42901,  42929,  42937,  42943,  42961,  42967,  42979,  42989,  43013,  43037,  43067,  43093,  43117,  43159,  43177,  43223,  43271,  43283,  43291,  43319,  43331,  43391,  43399,  43403, 
		43427,  43441,  43487,  43517,  43541,  43577,  43579,  43591,  43607,  43613,  43633,  43661,  43691,  43711,  43717,  43721,  43759,  43781,  43783,  43793,  43801,  43853,  43933,  43963, 
		43973,  43997,  44029,  44059,  44101,  44111,  44123,  44179,  44201,  44207,  44257,  44263,  44269,  44273,  44279,  44351,  44357,  44381,  44449,  44497,  44507,  44537,  44543,  44587, 
		44621,  44623,  44633,  44641,  44647,  44657,  44701,  44773,  44777,  44797,  44809,  44819,  44839,  44843,  44851,  44887,  44893,  44909,  44917,  44927,  44983,  44987,  45007,  45053, 
		45061,  45077,  45131,  45139,  45161,  45179,  45191,  45247,  45259,  45263,  45289,  45307,  45337,  45343,  45361,  45377,  45389,  45403,  45413,  45433,  45439,  45481,  45491,  45497, 
		45541,  45557,  45569,  45587,  45631,  45641,  45673,  45691,  45737,  45751,  45817,  45823,  45827,  45833,  45863,  45887,  45893,  45949,  45953,  45959,  45971,  46021,  46027,  46061, 
		46073,  46093,  46103,  46171,  46183,  46187,  46199,  46219,  46237,  46279,  46301,  46307,  46309,  46327,  46337,  46399,  46411,  46441,  46447,  46451,  46457,  46477,  46499,  46511, 
		46559,  46601,  46619,  46633,  46639,  46643,  46663,  46681,  46687,  46691,  46747,  46771,  46807,  46811,  46817,  46819,  46831,  46853,  46867,  46877,  46889,  46919,  46957,  46997, 
		47041,  47059,  47111,  47119,  47143,  47149,  47161,  47207,  47221,  47237,  47251,  47279,  47287,  47293,  47297,  47303,  47351,  47353,  47381,  47387,  47407,  47419,  47441,  47491, 
		47497,  47501,  47507,  47513,  47521,  47563,  47569,  47581,  47591,  47623,  47639,  47653,  47657,  47699,  47701,  47713,  47717,  47743,  47807,  47819,  47837,  47857,  47869,  47881, 
		47911,  47917,  47933,  47947,  47969,  47977,  47981,  48017,  48023,  48029,  48121,  48131,  48157,  48163,  48179,  48187,  48193,  48221,  48247,  48259,  48299,  48313,  48337,  48371, 
		48413,  48437,  48463,  48473,  48481,  48491,  48497,  48523,  48563,  48593,  48619,  48623,  48649,  48661,  48731,  48751,  48757,  48767,  48821,  48823,  48973,  48989,  48991,  49003, 
		49009,  49019,  49031,  49033,  49043,  49069,  49139,  49169,  49177,  49201,  49223,  49253,  49261,  49297,  49333,  49369,  49391,  49417,  49429,  49433,  49477,  49523,  49529,  49531, 
		49549,  49597,  49613,  49627,  49633,  49663,  49667,  49669,  49711,  49727,  49739,  49741,  49747,  49787,  49807,  49823,  49843,  49871,  49919,  49921,  49927,  49939,  49991,  49993, 
		49999,  50023,  50033,  50047,  50101,  50123,  50147,  50207,  50231,  50273,  50287,  50291,  50311,  50341,  50377,  50383,  50411,  50441,  50459,  50497,  50503,  50527,  50549,  50587, 
		50599,  50627,  50647,  50651,  50723,  50767,  50773,  50777,  50857,  50873,  50891,  50957,  50969,  50989,  51001,  51043,  51061,  51131,  51133,  51137,  51151,  51157,  51199,  51203, 
		51217,  51229,  51263,  51283,  51287,  51307,  51341,  51347,  51383,  51421,  51427,  51431,  51437,  51439,  51449,  51461,  51473,  51479,  51481,  51511,  51521,  51563,  51581,  51599, 
		51607,  51637,  51679,  51691,  51721,  51749,  51767,  51769,  51787,  51797,  51803,  51817,  51859,  51871,  51893,  51907,  51929,  51941,  51949,  51977,  52021,  52027,  52069,  52121, 
		52153,  52163,  52181,  52201
		};

		static uint[] primes3 = new uint[] {

	  };

		static long gcd(long u, long v)
		{
			// simple cases (termination)
			if (u == v)
				return u;

			if (u == 0)
				return v;

			if (v == 0)
				return u;

			int shift = 0;
			u = Math.Abs(u);
			while (((u | v) & 1) == 0) {
				shift++;
				u >>= 1;
				v >>= 1;
			}
		 
			while ((u & 1) == 0)
				u >>= 1;
		 
			do {
				while ((v & 1) == 0)
					v >>= 1;

				if (u > v) {
					long t = v; v = u; u = t; // Swap u and v.
				}
				
				v -= u; // Here v >= u.
			} while (v != 0);

			/* restore common factors of 2 */
			return u << shift;
		}

		static BigInteger gcd(BigInteger u, BigInteger v)
		{
			// simple cases (termination)
			if (u == v)
				return u;

			if (u.IsZero)
				return v;

			if (v.IsZero)
				return u;

			int shift = 0;
			u = Abs(u);
			v = Abs(v);
			while ((u | v).IsEven) {
				shift++;
				u >>= 1;
				v >>= 1;
			}
		 
			while (u.IsEven)
				u >>= 1;
		 
			do {
				while (v.IsEven)
					v >>= 1;

				if (u > v) {
					var t = v; v = u; u = t; // Swap u and v.
				}
					
				v -= u; // Here v >= u.
			} while (!v.IsZero);

			/* restore common factors of 2 */
			return u << shift;
		}

		private static int Legendre(BigInteger n, BigInteger p)
		{
			BigInteger p1, l;

			// assumes p is an odd prime
			p1 = (p - 1) >> 1;
			l = ModPow(n, p1, p);

			if (l == 1)
				return 1;
			if (l == 0)
				return 0;
			else
				return -1;
		}

        private static BigInteger InverseMod(BigInteger a, BigInteger x)
		{
			// fail if both inputs are even, then inverse doesn't exist
			Debug.Assert (!(x.IsEven && a.IsEven));

			BigInteger r = x;
			BigInteger _r = a;
			BigInteger t = Zero;
			BigInteger _t = One;
			BigInteger q, u, v;
			
			while (!_r.IsZero)
			{
				q = r / _r;
				
				u = t - q * _t;
				t = _t; _t = u; 
				
				v = r - q * _r;
				r = _r; _r = v;
			}
			
			if (r > 1)
				return Zero;
			if (t < 0)
				t += x;
				
			return t;
		}

        private static int InverseMod(int a, int x)
		{
			// fail if both inputs are even, then inverse doesn't exist
			Debug.Assert ( !((x & 1) == 0 && (a & 1) == 0) );

			int r = x;
			int _r = a;
			int t = 0;
			int _t = 1;
			int q, u, v;
			
			while (_r != 0)
			{
				q = r / _r;
				
				u = t - q * _t;
				t = _t; _t = u; 
				
				v = r - q * _r;
				r = _r; _r = v;
			}
			
			if (r > 1)
				return 0;
			if (t < 0)
				t += x;
				
			return t;
		}

		private static bool IsSmooth(BigInteger S, BigInteger pk)
        {
            BigInteger div = Zero;

            while (!(S.IsOne || div.IsOne))
            {
                div = GreatestCommonDivisor(S, pk);
				Debug.Write(string.Format("S: {0}...div: {1}...", S, div));
                S /= div;
            }

            return Abs(S).IsOne;         // smooth number with prime bound in factor_base
        }

		private static bool IsSmooth(BigInteger S, List<uint> primes)
        {
            BigInteger Q = primes.Aggregate(S, (a, b) => Divide(a, b));		// result should be 1 if divisible therefore smooth w.r.t. divisors
			
            return Abs(Q).IsOne;
        }

		private static bool IsSmooth(BigInteger S, uint[] primes)
		{
			var divisors = primes.Where(p => S % p == 0).ToList();

            return IsSmooth(S, divisors);
		}

        private static bool GetPrimeFactors(BigInteger N, List<uint> primes)
        {
			string expos = "";
            foreach (uint pr in primes)
            {
				int i = 0;
                while ((N % pr).IsZero)    // divisible by prime in factor_base[]
                {
					N /= pr;
					i++;
				}
				expos += pr.ToString();
				if (i == 1) expos += "¹ ";
				if (i == 2) expos += "² ";
				if (i == 3) expos += "³ ";
				if (i > 3) expos += '↑' + i.ToString() + ' ';
            }
			if (Abs(N).IsOne)
			{
				Console.WriteLine(expos);
				return true;		// smooth number with prime bound in factor_base
			}
			else
				return false;
        }

		private static uint[] GetPrimeFactors(BigInteger N, uint[] factor_base)
        {
			IEnumerable<uint> factors = 
				from prime 
				in factor_base 
				where (N % prime == 0) 
				select prime;
			
			Dictionary<uint, uint> exponents = factors.ToDictionary(x => x);
			uint[] expos = new uint[factor_base.Length];

			foreach (uint p in factors)
			{
				exponents[p] = 0;		// must initialize dictionary value
				while ((N % p).IsZero)
				{
					N /= p;
					
					// if (!exponents.ContainsKey(p))
						// exponents.Add(p, 1);
					// else
						exponents[p]++;
						expos[factor_base.ToList().IndexOf(p)]++;
				}
				//Console.Write("{0,8}^{1}...", p, exponents[p]);
			}

			if (N.IsOne)
				return expos;
			else
				return null;
		}

		private static long Pollard_Rho(long n)
		{
			int a = 1;
			long x = a, y = x, t = 0;
 
			while (true) {
				x = x * x + a;
				x %= n;
				y = y * y + a;
				y %= n;
				y = y * y + a;
				y %= n;
				
				t = gcd(x - y, n);
				if (t != 1)
					break;
			}
						
			return t;		// maybe == 1 or n
		}

        static BigInteger ShanksTonelli(BigInteger n, BigInteger p) 
		{
			Debug.Assert(p == 2 || (p & 1) == 1);		// p is 2 or must be odd

			// Is n a quadratic residue of p, i.e. n|p = 1
            // https://en.wikipedia.org/wiki/Euler%27s_criterion
			if (ModPow(n, (p - 1) >> 1, p) != 1) {
                return 0;
            }
 
            BigInteger Q = p - 1;
            uint S = 0;
            while ((Q & 1) == 0) {
                S += 1;
                Q >>= 1;
            }
 
			// https://www.rieselprime.de/ziki/Modular_square_root#Modulus_congruent_to_3_modulo_4
            if (S == 1) {
                BigInteger r1 = ModPow(n, (p + 1) >> 2, p);
                return r1;
            }
 
			uint z = 3;
			while (ModPow(z, (p - 1) >> 1, p) != p - 1)
			{
				z += 2;
            }
			//Console.WriteLine("{0,10}", z);
            BigInteger M = S;
            BigInteger t = ModPow(n, Q, p);
            BigInteger c = ModPow(z, Q, p);
            BigInteger R = ModPow(n, (Q + 1) >> 1, p);
 
            if (t == 0)
				return 0;

			while (t != 1)
			{
                int i = 0;
                BigInteger m = t;
                while (m != 1 && i < (M - 1)) {
                    m = m * m % p;
                    i++;
					//Console.WriteLine("{0,8}", i);
                }
                BigInteger b = c;
                BigInteger e = M - i - 1;
                while (e > 0) {
                    b = b * b % p;
                    e = e - 1;
                }
                R = R * b % p;
                c = b * b % p;
                t = t * c % p;
                M = i;
            }
			return Min(R, p - R);
        }

		static BigInteger SqrtModSqrd(BigInteger n, BigInteger p_sqrd)
		{
			BigInteger p, n_modp, n_modp_sqrd, root;
			BigInteger tmp1, tmp2;
			
			p = SquareRoot(p_sqrd);			// assumes p_sqrd is a perfect square
			Debug.Assert( (p * p).Equals(p_sqrd) );
			
			n_modp = n % p;
			n_modp_sqrd = n % p_sqrd;
			
			root = ShanksTonelli(n_modp, p);
			tmp1 = root * root - n_modp_sqrd;
			tmp2 = InverseMod(root << 1, p);
			tmp1 *= tmp2;

			return Abs(root - tmp1) % p_sqrd;
		}
		
		static BigInteger SquareRoot(BigInteger n)
		{
			double HalfLogXBase2 = Log(n, 2) / 2.0;
			BigInteger d = n >> (int)HalfLogXBase2;
			BigInteger q;
			Stopwatch sw = new Stopwatch();

			int i = 0;
			sw.Start();
			//Newton's Method
			do
			{
				q = n / d + d;
				q >>= 1;
				d = q;
				i++;
			} while (q * q > n);
			sw.Stop();

			Debug.Assert(q * q <= n);
			return q;
		}
		
        public static BigInteger NthRoot(BigInteger @base, int n)
        {
            if (@base < 0 || n <= 0)
            {
                throw new ArgumentException();
            }

            int n1 = n - 1;
            BigInteger n2 = n;
            BigInteger n3 = n1;
            BigInteger c = 1;
            BigInteger d = (n3 + @base) / n2;
            BigInteger e = ((n3 * d) + (@base / Pow(d, n1))) / n2;
            while (c != d && c != e)
            {
                c = d;
                d = e;
                e = (n3 * e + @base / Pow(e, n1)) / n2;
            }
            if (d < e)
            {
                return d;
            }
            return e;
        }

		private static void Dump_Matrix(List<BitArray> M)
		{
			for (int i = 0; i < M.Count; i++)                  // number of rows
			{
				Console.Write("{0,3}: ", i);
				for (int j = 0; j < M[i].Length; j++)          // number of columns
					Console.Write("{0}", M[i].Get(j) ? '1' : '.');
				Console.WriteLine();
			}
		}

		private static void Gauss_Elimination(List<BitArray> M)
		{
			uint row_adds = 0, row_swaps = 0;
			Stopwatch sw = new Stopwatch();

			sw.Start();
			for (int p = 0; p < M.Count; p++)             // number of rows
			{                                              //
				for (int i = p + 1; i < M.Count; i++)     // find pivot row and swap
				{
					if (M[i].Get(p) && !M[p].Get(p)) {
#if DEBUG
						Debug.WriteLine($"Swap rows: {p} and {i}");
#endif
						var tmpRow = M[p];
						M[p] = M[i];
						M[i] = tmpRow;
						row_swaps++;
					}
					if (M[i].Get(p)) {
						// Add these rows if value in pivot column is true
#if DEBUG				
						Debug.WriteLine($"Add row: {p,4} to row: {i,4}");
#endif
						M[i].Xor(M[p]);	// row i is the result of row p being added
						row_adds++;
					}   // for i
				}
			}     // for p - NOT: Parallel.For p
			sw.Stop();
#if DEBUG
			string strValue = $"\nRow adds: {row_adds}\nRow swaps: {row_swaps}\nElapsed time: {sw.ElapsedMilliseconds} ms\n";
			Console.WriteLine(strValue);
#endif
		}

		private static void FindSmooth(BigInteger S, BigInteger p, BigInteger r, BigInteger sqrt, BigInteger end, BigInteger primorial, List<uint> primes_list)
		{
			Debug.Assert( (S % p).IsZero );
			bool smooth = false;
			
			BigInteger k = p + r;
			BigInteger N = S + k * k;
			k = sqrt / p * p + r;
			//Debug.Fail("Attaching debugger...");
			
			for (int i = -2000; i < 2000 && !smooth; i++, k += p)
			{
				S = k * k - N;
				Debug.Assert( (S % p).IsZero );
				smooth = IsSmooth(S, primorial);
			}
			
			if (smooth)
			{
				Console.WriteLine("\nS = {0}", S);
			
				bool smooth_again = GetPrimeFactors(S, primes_list);
				Debug.Assert(smooth_again);
			}
		}

		private static void FG_loop(int limit_a, int limit_b, uint[] residue_primes, BigInteger afb, BigInteger rfb)
		{
			BigInteger root = Zero;
			List<Tuple<BigInteger, int, int>> AFB = new List<Tuple<BigInteger, int, int>>();
			List<Tuple<BigInteger, int, int>> RFB = new List<Tuple<BigInteger, int, int>>();
			
			int smooths_found = 0, thousand_smooths = 0;
			var thousand_primes = primes.Where(pr => pr > 1000)
				.Aggregate(One, (a, b) => Multiply(a, b));
									
			Stopwatch sw = new Stopwatch();
			sw.Start();

			for (int b = 1; b <= limit_b; b++)		// 
			{
				for (int a = -limit_a; a < limit_a; a++)
				{	
				
					if (gcd(a, b) == 1 || b == 1)
					{
						var F_of_ab = F(a, b);
						//var G_of_ab = G(a, b, root);
						// if (IsSmooth(G_of_ab, rfb_primorial))
						// {
							// int g_count = primes.Where(p => F_of_ab % p == 0).Count();
							// Console.WriteLine("G({0}, {1}): {2}\n# primes {3}", a, b, G_of_ab, g_count);
						// }
						//if (!GreatestCommonDivisor(F_of_ab, thousand_primes).IsOne)
						//int p_count = primes.Where(p => F_of_ab % p == 0).Count();
						//if (p_count > 6)
						{
							///Console.WriteLine("F({0}, {1}): {2}\n# primes {3}", a, b, F_of_ab, p_count);
							AFB.Add(new Tuple<BigInteger, int, int>(F_of_ab, a, b));
							//RFB.Add(new Tuple<BigInteger, int, int>(G_of_ab, a, b));
							//Console.WriteLine("{0}", F_of_ab);
						}
						//continue;
						
						Debug.Assert(GreatestCommonDivisor(a, b).IsOne);
						//Debug.Assert(a % b == 0);
						
						BigInteger smooth1 = (int)Math.Pow(-b, 5.0) * F(-a / b);
						BigInteger smooth2 = G(a, b, root);
						BigInteger smooth3 = F(a, b);


						bool bSmooth1 = IsSmooth(smooth1, afb);		// algebraic FB
						bool bSmooth2 = IsSmooth(smooth2, rfb);		// rational FB
						bool bSmooth3 = IsSmooth(smooth3, afb);		// algebraic FB

						if (a % b == 0)
						{
							Debug.Assert(bSmooth1 == bSmooth3);
							Debug.Assert(smooth1.Equals(smooth3));
						}

						//Console.Write("{0,8}{1,4}\t{2}, {3}\t{4}\r", a, b, bSmooth3, bSmooth2, smooth3);
						
						if (bSmooth3 && true)
						{
							smooths_found++;
							//Console.WriteLine("\n({0}, {1})\t{2,5} {3,5}", a, b, bSmooth3, bSmooth2);
							Console.WriteLine("({0},{1})\tsmooth3: {2}", a, b, smooth3);
							bool smooth_again = IsSmooth(smooth3, primes);
							Debug.Assert(smooth_again);
						}
						
						if (bSmooth2 && false)
						{
							smooths_found++;
							//Console.WriteLine("\n({0}, {1})\t{2,5} {3,5}", a, b, bSmooth3, bSmooth2);
							Console.WriteLine("({0},{1})\tsmooth2: {2}", a, b, smooth2);
							bool smooth_again = IsSmooth(smooth2, residue_primes);
							Debug.Assert(smooth_again);
						}
					}	// if (H(a) % pr == 0)
				}		// Parallel.For<int>(a, LIMIT
			}			// for (; b <  -- while (smooths_found < FB_count)
			sw.Stop();
			Console.WriteLine("\n\nF+G(a, b) loop time: {0:F1} s\n\n", sw.Elapsed.TotalSeconds);

			AFB.Sort(delegate(Tuple<BigInteger, int, int> A, Tuple<BigInteger, int, int> B) {
				return A.Item3.CompareTo(B.Item3);
			});
			RFB.Sort(delegate(Tuple<BigInteger, int, int> A, Tuple<BigInteger, int, int> B) {
				return A.Item3.CompareTo(B.Item3);
			});

			sw.Restart();
			
			ParallelOptions options = new ParallelOptions() { MaxDegreeOfParallelism = 2 };
			Parallel.ForEach<Tuple<BigInteger, int, int>>(AFB, options, t =>
			{
				if (!GreatestCommonDivisor(t.Item1, thousand_primes).IsOne)
				{
					thousand_smooths++;
					if (IsSmooth(t.Item1, residue_primes))
					{
						Console.WriteLine("F({0}, {1}) =\t{2}", t.Item2, t.Item3, t.Item1);
						smooths_found++;
						//Debug.Assert(GetPrimeFactors(t.Item1, primes));
					}
				}
			});
			sw.Stop();
			Console.WriteLine("foreach IsSmooth() time: {0:F1}", sw.Elapsed.TotalSeconds);
			
		}
		
		static void TonelliShanks_Test(BigInteger N, uint[] residue_primes, BigInteger smooth_primorial)
		{
			foreach (uint p in residue_primes)
			{
				if (p < 2000 || p > 100000) continue;
				//Console.Write("p = ");
				/*
				uint pq = 1;
				
				foreach (uint q in residue_primes)
				{
					if (q <= p) continue;
					pq = p * q;		// OVERFLOW!!
					Console.WriteLine("p: {0}\tq: {1}\tpq: {2}", p, q, pq);
					break;
				}*/
				//Console.Write("bigP = {0}\r", bigP);
				//px |= 1;
				
				if (Legendre(N, p) != 1)
					continue;

				uint px = p;
				
				if (!GreatestCommonDivisor(px, N).IsOne)
				{
					Console.WriteLine("GCD: {0}", px);
					break;
				}
				
				var root = ShanksTonelli(N, (int)px);

				if (root != 0)
				{
					BigInteger r1 = root;
					BigInteger r2 = px - root;
					Console.Write("legendre(bigN, p) = {0}\t", Legendre(N, px));
					Console.Write("p = {0}\np^2 % 20 = {1}\t", px, px * px % 20);
					Console.Write("root1 = {0}\t", r1);
					Console.WriteLine("root2 = {0}\n", r2);
							
					BigInteger n1 = N - (px + r1) * (px + r1);
					Debug.Assert( (n1 % px).IsZero );
					BigInteger q1 = n1 / px;
					smooth_primorial *= n1;

					//bool smooth = IsSmooth(n1, fb_primorial);
					//Console.WriteLine("n1 / p = {0}\nIsSmooth: {1}\n", q1, false);
					//if (smooth)
					//	smooth = GetPrimeFactors(n1, residue_primes);

					Debug.Assert( (N - px * q1) == (px + r1) * (px + r1) );
					Debug.Assert( ((N - n1) % (px + r1)).IsZero );


					BigInteger n2 = N - (px + r2) * (px + r2);
					Debug.Assert( (n2 % px).IsZero );
					BigInteger q2 = n2 / px;
					smooth_primorial *= n2;

					//smooth = IsSmooth(n2, fb_primorial);
					//Console.WriteLine("n2 / p = {0}\nIsSmooth: {1}", q2, false);
					//if (smooth)
					//	smooth = GetPrimeFactors(n2, residue_primes);

					Debug.Assert( (N - n2) == (px + r2) * (px + r2) );
					Debug.Assert( ((N - n2) % (px + r2)).IsZero );

					BigInteger sprod = n1 * n2;
					Debug.Assert( (sprod % px).IsZero );


					Debug.Assert((smooth_primorial % px).IsZero);

					/*
					List<Task> smooth = new List<Task>();
					smooth.Add( Task.Run(() => { FindSmooth(n1, px, r1, a0, a2, fb_primorial, residue_primes); }) );
					smooth.Add( Task.Run(() => { FindSmooth(n2, px, r2, a0, a2, fb_primorial, residue_primes); }) );
					
					Task.WaitAll(smooth.ToArray());
					*/
					BigInteger np1 = px + r1;
					BigInteger np2 = px + r2;
					
					uint t1 = 0, t2 = 0;
					string n1_factors = "1 ";
					string n2_factors = "1 "; 
					// bool even1 = false;
					// bool even2 = false;
					foreach (uint py in residue_primes)
					{
						if ((n1 % py).IsZero)
						{
							int expo = 0;
							while ((n1 % py).IsZero)
							{
								n1 /= py;
								expo++;
							}
							// if (expo > 0 && (expo & 1) == 0)
								// even1 = true;
							n1_factors += String.Format("* {0}^{1} ", py, expo);
							t1++;
						}

						if ((n2 % py).IsZero)
						{
							int expo = 0;
							while ((n2 % py).IsZero)
							{
								n2 /= py;
								expo++;
							}
							// if (expo > 0 && (expo & 1) == 0)
								// even2 = true;
							n2_factors += String.Format("* {0}^{1} ", py, expo);
							t2++;
						}
					}
						Console.WriteLine("\nn1 divisible by: {0} primes\nn2 divisible by: {1} primes", n1_factors, n2_factors);
						Console.WriteLine("\nn1: {0}\nn2: {1}", n1, n2);
					
						Console.WriteLine("\n{0}", new String('-', 80));
					/*
					if ( IsSmooth(n1, fb_primorial) || IsSmooth(n2, fb_primorial) )
					{
					}
					np1 -= p; n1 = bigN - np1 * np1;
					Debug.Assert(n1 % p == 0);
					np2 -= p; n2 = bigN - np2 * np2;
					Debug.Assert(n2 % p == 0);
					*/
				} 		// if (ResSol.Exists )
				else {
					//Console.WriteLine("No solution exists\n");
				}	
			}	// foreach | while

			/*
			Console.WriteLine("{0}\t{1}", IsSmooth(Parse("3914294452067337121529390594051069877"), fb_primorial), strPassword);
			
			List<BigInteger> large_primes = new List<BigInteger>();
			bigP = a0;
			//while (!ModPow(7, bigP - 1, bigP).IsOne)
			{
				foreach (uint pr in primes3)
				{
					bigP = ModPow(a0, pr-1, bigN);
					
					if (ModPow(7, bigP - 1, bigP).IsOne)
					{
						large_primes.Add(bigP);
						Console.WriteLine("{0}", bigP);
					}
				}
			}

			bool smooth = IsSmooth(2548736398, 113418769711);
			Console.WriteLine("1. IsSmooth: {0}", smooth);
			
			smooth = IsSmooth(2548736398, 226837539422);
			Console.WriteLine("2. IsSmooth: {0}", smooth);
			
			smooth = IsSmooth(10094270504279, 2548736398);
			Console.WriteLine("3. IsSmooth: {0}", smooth);
			
			Debug.Assert(smooth);
			Console.ReadLine();			
			*/
		}
		
		static BigInteger[] C;

		static BigInteger F(int x) => 	Pow(x, 5) 	+ C[0] * Pow(x, 4) 
													+ C[1] * Pow(x, 3) 
													+ C[2] * Pow(x, 2) 
													+ C[3] * x 
													+ C[4];

		static BigInteger F(BigInteger x) => 	Pow(x, 5) +	
												Pow(x, 4) * C[0] +
												Pow(x, 3) * C[1] +
												Pow(x, 2) * C[2] +
													x * 	C[3] +
															C[4];
		/*
		static BigInteger F(int a, int b) => 	Pow(a, 5) 	- C[0] * Pow(a, 4) * b
															+ C[1] * Pow(a, 3) * Pow(b, 2) 
															- C[2] * Pow(a, 2) * Pow(b, 3) 
															+ C[3] 		* a 	* Pow(b, 4) 
															- C[4] 				* Pow(b, 5);
		*/
		static BigInteger F(int a, int b) => 	Pow(a, 5) *	 C[0] - C[1] * Pow(a, 4) * b
															+ C[2] * Pow(a, 3) * Pow(b, 2) 
															- C[3] * Pow(a, 2) * Pow(b, 3) 
															+ C[4] 		* a 	* Pow(b, 4) 
															- C[5] 				* Pow(b, 5);

		static BigInteger G(int a, int b, BigInteger m) =>	(a + b * m);
		
		static BigInteger H(int a, int b) =>	Pow(a, 3)	- C[0] * Pow(a, 2) * b
															+ C[1] 		* a		* Pow(b, 2)
															- C[2] 				* Pow(b, 3);

		static BigInteger H(int x) => 			Pow(x, 3)	+ C[0] * Pow(x, 2) 
															+ C[1] * x 
															+ C[2];

//---------------------------------------------------------------------------------------------------													
		
        static void Main(string[] args) {
            List<Tuple<long, long>> pairs = new List<Tuple<long, long>>() {
                new Tuple<long, long>(10, 13),
                new Tuple<long, long>(56, 101),
				new Tuple<long, long>(800, 2923),
                new Tuple<long, long>(1030, 10009),
                new Tuple<long, long>(1032, 10009),
                new Tuple<long, long>(44402, 100049),
                new Tuple<long, long>(665820697, 1000000009),
                new Tuple<long, long>(881398088036, 1000000000039),
            };
 
            foreach (var pair in pairs) {
                var sol = ShanksTonelli(pair.Item1, pair.Item2);
                Console.WriteLine("n = {0}", pair.Item1);
                Console.WriteLine("p = {0}", pair.Item2);
                if (!sol.IsZero) {
                    Console.WriteLine("root1 = {0}", sol);
                    Console.WriteLine("root2 = {0}\n", pair.Item2 - sol);
                } else {
                    Console.WriteLine("No solution exists\n");
                }
            }
 
            BigInteger bigN = Parse("41660815127637347468140745042827704103445750172002");
            BigInteger bigP = Pow(10, 50) + 577;
            var root = ShanksTonelli(bigN, bigP);
            Console.WriteLine("n = {0}", bigN);
            Console.WriteLine("p = {0}", bigP);
            if (!root.IsZero) {
                Console.WriteLine("root1 = {0}", root);
                Console.WriteLine("root2 = {0}\n", bigP - root);
            } else {
                Console.WriteLine("No solution exists\n");
            }

			bigN = Parse("8042735896184906291582258800889815033");
			bigP = 31;
            root = ShanksTonelli(bigN, (int)bigP);
            Console.WriteLine("n = {0}", bigN);
            Console.WriteLine("p = {0}", bigP);
            if (!root.IsZero) {
                Console.WriteLine("root1 = {0}", root);
                Console.WriteLine("root2 = {0}\n", bigP - root);
            } else {
                Console.WriteLine("No solution exists\n");
            }

			
			//bigN = 45113;
			//bigN = Parse("4611686217423659867");
			//bigN = Parse("64129570938443909002430768770483");
			//bigN = Parse("1152656570285234495703667671274025629");
			// bigN = Parse("1427307451730912531117185238095045051");
			// bigN = Parse("6105535576754234603308185580298776327");
			// bigN = Parse("12715078484521083242869458867824574151");
			// bigN = Parse("21036551414079632357885369941319079457");
			// bigN = Parse("38026600967337247697949761371326967247");
			// bigN = Parse("45837360030122001653638055650195778431");
			// bigN = Parse("72226396695506400745356705296866543219");
			// bigN = Parse("81639369383890472319083144055093154391");
			// bigN = Parse("40868700382277490531899048610847526324724937757");
			// bigN = Parse("91056427671115356393514677020931719553248640007");
			// bigN = Parse("116385100850127761864925743997768788238692710790449");
			// bigN = Parse("239839767617610098930908899950873465446895582536986952273");
			// bigN = Parse("213373250047292900922963491789292983262625983360017824143019");
			// NOT a semiprime!  bigN = Parse("1571984925348300291324522060374542225976425353660133984883023");
			// bigN = Parse("3291009398659388310141151606474459623481709140484117055265322371");
			// bigN = Parse("616339703815629101560895976525701529857730949205622007176648521221");
			bigN = Parse("388308733305151697913542826646443043299408009003244602914653817783");
			// Value was either too large or too small for an Int64.
			// bigN = Parse("6121149868564177516789267858123628666058719298150814090183132869931525893881272355067160797193977749");
			Console.WriteLine("n = {0} ...\nn (mod 4): {1} ...", bigN, bigN & 3);

			BigInteger a0 = SquareRoot(bigN) + 1;
			BigInteger a1 = SquareRoot(bigN << 1);
			//BigInteger a2 = a0 + ((int)Log(a0) << 16);
			Console.WriteLine("\n\na0 = {0}\na1 = {1}", a0, a1);

				BigInteger b0 = a0 | 1;
				while (!ModPow(17, b0 - 1, b0).IsOne)
				{
					b0 -= 2;
				}
				Console.WriteLine("b0 = {0}\n", b0);
					
			root = NthRoot(bigN, 5);
			//root = Parse("3961312161867150125");
			root |= 1;
			while (!ModPow(3, root-1, root).IsOne)
				root -= 2;
			Console.WriteLine("root (i.e. a + bm) = {0}\n", root);
			
			C = new BigInteger[] { Zero, Zero, Zero, Zero, Zero, Zero };
			/*
			C[0] = bigN - Pow(root, 3);
			C[0] /= Pow(root, 2);
			C[1] = bigN - Pow(root, 3) - C[0] * Pow(root, 2);
			C[1] /= root;
			C[2] = bigN - Pow(root, 3) - C[0] * Pow(root, 2) - C[1] * root;
			
			Debug.Assert( (Pow(root, 3) + C[0] * Pow(root, 2) + C[1] * root + C[2]).Equals(bigN) );
			Debug.Assert( C[0].Equals(15) );
			Debug.Assert( C[1].Equals(29) );
			Debug.Assert( C[2].Equals(8) );
			*/
			C[0] = bigN - Pow(root, 5);
			C[0] /= Pow(root, 4);
			C[1] = bigN - Pow(root, 5) - C[0] * Pow(root, 4);
			C[1] /= Pow(root, 3);
			C[2] = bigN - Pow(root, 5) - C[0] * Pow(root, 4) - C[1] * Pow(root, 3);
			C[2] /= root * root;
			C[3] = bigN - Pow(root, 5) - C[0] * Pow(root, 4) - C[1] * Pow(root, 3) - C[2] * root * root;
			C[3] /= root;
			C[4] = bigN - Pow(root, 5) - C[0] * Pow(root, 4) - C[1] * Pow(root, 3) - C[2] * root * root - C[3] * root;

			Debug.Assert( (Pow(root, 5) + C[0] * Pow(root, 4) + C[1] * Pow(root, 3) + C[2] * root * root + C[3] * root + C[4]).Equals(bigN) );
			Debug.Assert( F(root).Equals(bigN) );
			/*
			C[0] = 6275346;
			C[1] = Parse("-20209657707");
			C[2] = Parse("-86692046252804");
			C[3] = Parse("70145911331199694");
			C[4] = Parse("-5689011891508368596");
			C[5] = Parse("228431869032618186624");

			Debug.Assert( (Pow(root, 5) * C[0] + Pow(root, 4) * C[1] + Pow(root, 3) * C[2] + root * root * C[3] + root * C[4] + C[5]).Equals(bigN) );
			*/
			// Debug.Fail("Attaching debugger.");
			// Debugger.Break();

			for (int i = 0; i < 4; i++)
				for (int j = i+1; j < 5; j++)
					Console.WriteLine("GCD(C[{0}], C[{1}]) = {2}", i, j, gcd(C[i], C[j]));
			Console.WriteLine("Aggregate(C[], GCD): {0}", Enumerable.Aggregate<BigInteger>(C, GreatestCommonDivisor));
			Console.WriteLine();

			double logN = Log(bigN);
			long PrimeB = (long)Math.Exp(Math.Sqrt(logN * Math.Log(logN)) * 0.45);
			
			const long LIMIT = 126781;
			uint[] primes = new uint[LIMIT];
			
			
			// Eratosthenes sieve
			uint p;
			primes[0] = 2;
			for (p = 0; primes[p] < LIMIT; ) 
			{
				for (uint i = primes[p]; i < LIMIT; i += primes[p])
					primes[i] = 1;
				primes[++p] = primes[p-1] + 1;
				//find next prime (where s[p]==0)
				for (; primes[p] < LIMIT && primes[primes[p]] == 1; primes[p]++) ;
			}
			Array.Resize(ref primes, (int)p);


			List<uint> factor_base = primes
				.Where(qr => Legendre(bigN, qr) == 1).ToList();	// qr != 2 && include evens?
			
			var log_primes = factor_base
				.Select( p => new Tuple<uint, double>(p, Math.Log((double)p)) );
				
			var mod_sqrts = factor_base
				.Select( p => new Tuple<uint, uint>(p, (uint)ShanksTonelli(bigN, p)) );
			
			var dict_log_primes = log_primes
				.ToDictionary(x => x.Item1);
				
			var dict_mod_sqrts = mod_sqrts
				.ToDictionary(x => x.Item1);

			int FB_count = factor_base.Count;

			// foreach (var obj in log_primes)
			p = 9931;
			if (dict_log_primes.ContainsKey(p))
			{
				Console.WriteLine("p: {0} ... log_p: {1} ... ", p, dict_log_primes[p].Item2);
				//Console.WriteLine("p: {0} ... log_p: {1} ... ", obj.Item1, dict_log_primes[obj.Item1].Item2);
			}
			// Console.Write("\nCtrl-C: ");
			// Console.ReadLine();
						
			Console.Write("\nCalculating primorial...");
			BigInteger afb_primorial, rfb_primorial;
			
			// https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregate
			
			afb_primorial = factor_base
				.Aggregate(One, (a, b) => Multiply(a, b));
			
			rfb_primorial = primes
				.Where(pr => pr < LIMIT)
				.Aggregate(One, (a, b) => Multiply(a, b));
			
			Console.WriteLine("\nprimes.Count: {0}\nfactor_base.Count: {1}\nlog_primes.Sum(): {2}\n", 
				primes.Length, FB_count, log_primes.Select( log_p => log_p.Item2).Sum() );

			BigInteger[] F_of_x = new BigInteger[primes.Last()];
			for (int x = 0; x < primes[primes.Length-1]; x++)
				F_of_x[x] = F(x);

			BigInteger S = Parse("188075526629752489672183125");
			var pList = primes.Where(p => S % p == 0).ToList();
			
			Stopwatch sw = new Stopwatch();

			/*
			sw.Start();	
			for (int b = 1; b <= LIMIT; b++)
				Debug.Assert(!IsSmooth(S, pList));
			sw.Stop();
			Console.WriteLine("{1} rounds of IsSmooth(S, pList) time: {0} ms", sw.ElapsedMilliseconds, LIMIT);
			
			sw.Restart();	
			for (int b = 1; b <= LIMIT >> 1; b++)
				Debug.Assert(!IsSmooth(S, afb_primorial));
			sw.Stop();
			Console.WriteLine("{1} rounds of IsSmooth(S, afb_primorial) time: {0} ms", sw.ElapsedMilliseconds, LIMIT >> 1);
			Console.WriteLine();
			*/

			const int LIMIT2 = 1000000;
			double[] thresholds1 = new double[LIMIT2];
			double[] thresholds2 = new double[LIMIT2];
			BigInteger[] residues1 = new BigInteger[LIMIT2];
			BigInteger[] residues2 = new BigInteger[LIMIT2];

			int smooths_found = 0;
			int partials_found = 0;
			int thresholds1_c = 0;
			int thresholds2_c = 0;
			int cycles = 0;
			
			BigInteger A, B, A_inv_modN, A_sqrd;

			List<BitArray> matrix = new List<BitArray>();
			List<BigInteger> Q_values = new List<BigInteger>();
			List<BigInteger> roots = new List<BigInteger>();
			
			Dictionary<long, List<string>> L_primes = new Dictionary<long, List<string>>();
			List<BigInteger> L_residues = new List<BigInteger>();
			List<BitArray> L_matrix = new List<BitArray>();
			
			

			A = SquareRoot(4 * bigN) / LIMIT2;
			A = SquareRoot(A) | 1;
			

			int bigN_len = bigN.ToString().Length;
			var fp = new StreamWriter(string.Format("c{0}.fulls", bigN_len));


				var fp3 = new StreamWriter(string.Format("c{0}.fbase", bigN_len));
				foreach (var res_p in factor_base)
				{
					fp3.WriteLine("{0}", res_p);
				}
				fp3.Close();


			Console.Write("Sieving...");
			sw.Restart();
			while ( (smooths_found + partials_found/4) < FB_count + 200 )
				//L_primes.Where(l => l.Value.Count() > 1).Count() < log_primes.Count())
			{
				thresholds1 = new double[LIMIT2];
				thresholds2 = new double[LIMIT2];
				Dictionary<uint, long> root_offsets1 = new Dictionary<uint, long>();
				Dictionary<uint, long> root_offsets2 = new Dictionary<uint, long>();

				// find A where A is prime and is a q.r. of N
				while (primes.Where(p => A % p == 0).Count() > 0 || Legendre(bigN, A) == -1)
					A += 2;
				
				A_sqrd = A * A;
				
				A_inv_modN = InverseMod(A, bigN);		// A^-1 = 1 mod N
				B = SqrtModSqrd(bigN, A_sqrd);			// b^2 = N mod A_sqrd
				
				if (B.IsEven) B = A_sqrd - B;
				
				//Console.WriteLine("\nA: {0} ... B: {1,20} ... A_inv_modN: {2} ...", A, B, A_inv_modN);

				foreach (var res_p in factor_base)
				{
					if (res_p == 2) continue;

					int A_modp = (int)(A % res_p);
					int B_modp = (int)(B % res_p);
					long inv_A_modp = InverseMod(A_modp, (int)res_p);
					Debug.Assert(inv_A_modp * inv_A_modp < long.MaxValue);
					Debug.Assert(inv_A_modp * A_modp % res_p == 1);

					int x = (int)dict_mod_sqrts[res_p].Item2 - B_modp;
					long ix1 = x * inv_A_modp * inv_A_modp % res_p;
					if (ix1 < 0)
						ix1 += (int)res_p;
					root_offsets1.Add(res_p, ix1);
					
					//Debugger.Break();
					//Console.Write("ix1: {0} ... res_p: {1} ... ", ix1, res_p);
					
					x = (int)(res_p - dict_mod_sqrts[res_p].Item2 - B_modp);
					long ix2 = x * inv_A_modp * inv_A_modp % res_p;
					if (ix2 < 0)
						ix2 += (int)res_p;
					root_offsets2.Add(res_p, ix2);
				}
				
				var t0 = sw.ElapsedMilliseconds;
				foreach (var obj in log_primes)
				{
					uint res_p = obj.Item1;
					if (res_p < 167) continue;
				
					Debug.Assert(ModPow(bigN, (res_p - 1) >> 1, res_p).IsOne);
					// if (res_p == 17)
						// Debugger.Break();
						
					//root = mod_sqrts.Where(r => r.Item1 == res_p).First().Item2;
					/*
					root = dict_mod_sqrts[res_p].Item2;
					int r1 = (int) root;
					int r2 = (int)(res_p - root);
					Debug.Assert (!root.IsZero);
					*/

					//Console.WriteLine("prime = {0}, root1 = {1}\troot2 = {2}\n", res_p, r1, r2);
					//bool bBreak = false;

					double log_p = dict_log_primes[res_p].Item2;
					int ix1 = (int)root_offsets1[res_p];
					int ix2 = (int)root_offsets2[res_p];
					/*
					BigInteger index1 = r1 + a0 - a0 % res_p;
					index1 += res_p; // * (LIMIT2 / res_p);
					int ix1 = (int)(index1 % LIMIT2);

					BigInteger index2 = r2 + a0 - a0 % res_p;
					index2 += res_p; // * (LIMIT2 / res_p);
					int ix2 = (int)(index2 % LIMIT2);
					*/
					
					while (ix1 < LIMIT2 && ix2 < LIMIT2)
					{
						//residues1[ix1] = -bigN + index1 * index1;
						//Debug.Assert( (residues1[ix1] % res_p).IsZero );
						thresholds1[ix1] += log_p;
						ix1 +=  (int)res_p;
						// index1 += (int)res_p;

						//residues2[ix2] = -bigN + index2 * index2;
						//Debug.Assert( (residues2[ix2] % res_p).IsZero );
						thresholds2[ix2] += log_p;
						ix2 +=  (int)res_p;
						// index2 -= (int)res_p;
					}
				}
				var t1 = sw.ElapsedMilliseconds;
				//Console.WriteLine("thresholds[] fill time: {0:F1} s", (t1 - t0) / 1000.0);
				
				//double threshold = Math.Log(Math.Sqrt((double)bigN / 2) * LIMIT2 
				//							/ Math.Pow(factor_base.Last(), 4.0));
				double threshold = Log(bigN) / 2.0 + Math.Log(LIMIT2);
				threshold /= 2.0;
				//Console.WriteLine("threshold: {0}\n", threshold);
				
				
				t0 = sw.ElapsedMilliseconds;
				for (int i = 0; i < LIMIT2; i++) 
				{
					
					if (thresholds1[i] > threshold || thresholds2[i] > threshold)
					{
						if (thresholds1[i] > threshold)
						{
							thresholds1_c++;
						} else {
							thresholds2_c++;
						}

						List<uint> divisors = new List<uint>();
						/*
						foreach (var m in dict_mod_sqrts.Keys)
						{
							var res_p = m;
							int A_modp = (int)(A % res_p);	
							int B_modp = (int)(B % res_p);
							int x = (int)dict_mod_sqrts[res_p].Item2 - B_modp;
							long inv_A_modp = InverseMod(A_modp, (int)res_p);
							Debug.Assert(inv_A_modp * A_modp % res_p == 1);
							
							long test1 = x * inv_A_modp * inv_A_modp % (int)res_p;
							if (test1 < 0)
								test1 += (int)res_p;
						
							x = (int)(res_p - dict_mod_sqrts[res_p].Item2 - B_modp);
							long test2 = x * inv_A_modp * inv_A_modp % (int)res_p;
							if (test2 < 0)
								test2 += (int)res_p;
							
							if (i % res_p == test1 || i % res_p == test2)
							{
								divisors.Add(res_p);
							}
						}
						*/
						// use lists created above to check if roots exist
						
						var Q = (A_sqrd * i + B) * A_inv_modN;
						var residue = Q * Q % bigN;
						string expo = "";
						if ( residue > (bigN >> 1) )
						{
							expo = "-1 1 ";
							residue = bigN - residue;
						}

						var save_residue = residue;

						if (residue.IsEven)
							divisors.Add(2);
							
						foreach (var m in root_offsets1.Keys)
						{
							if ( !divisors.Contains(m) 
								 && (root_offsets1[m] == i % m || root_offsets2[m] == i % m) )
							{
								divisors.Add(m);
								var t = factor_base.IndexOf(m);
								Debug.Assert(m == factor_base[t]);
								//Console.Write("factor_base[{0}]: {1} ... ", t, factor_base[t]);
							}
						}
						
						BitArray expo_bits = new BitArray((int)(FB_count * 2));
						foreach (var div in divisors)
						{
							int fb_offset = factor_base.IndexOf(div);
							Debug.Assert(fb_offset < FB_count);
							int e = 0;
							while ((residue % div).IsZero)
							{
								e++;
								expo_bits[fb_offset] ^= true;
								residue /= div;
							}
							// factor_base array offset is 1-based
							expo += string.Format("{0} {1} ", fb_offset+1, e);
						}
						if (residue.IsOne)
						{
							Q_values.Add(Q);
							roots.Add(save_residue);
							matrix.Add(expo_bits);
							smooths_found++;
							//Console.WriteLine("Q: {0} ... residue: {1} ... i: {2} ...\n", Q, save_residue, i);
							fp.WriteLine("{0} {1} 0", Q % bigN, expo);
							Console.Write('.');
						}
						else if (residue < A)
						{
							long large_prime = (long)residue;
							
							if (Legendre(large_prime, bigN) == 1)
								continue;
								
							if (!L_primes.ContainsKey(large_prime))
							{
								var relation = new Tuple<BigInteger, BitArray>(save_residue, expo_bits);
								var list = new List<string>();
								L_primes.Add(large_prime, list);
								L_primes[large_prime].Add(string.Format("{0}\t{1} {2} 0", large_prime, Q % bigN, expo));
								
								L_residues.Add(save_residue);
								L_matrix.Add(expo_bits);
								//fp2.WriteLine("{0}\t{1} {2} 0", large_prime, Q % bigN, expo);
							}
							else
							{
								var relation = new Tuple<BigInteger, BitArray>(save_residue, expo_bits);
								// add prime exponents to list for large_prime
								L_primes[large_prime].Add(string.Format("{0}\t{1} {2} 0", large_prime, Q % bigN, expo));

								L_residues.Add(save_residue);
								L_matrix.Add(expo_bits);
								//fp2.WriteLine("{0}\t{1} {2} 0", large_prime, Q % bigN, expo);
								partials_found++;
								Console.Write('+');
							}
						}
							/*
							else if (residue < A_sqrd)
							{
								if (ModPow(2, residue-1, residue).IsOne)
									continue;
								// Debugger.Break();
								// p-rho is too slow to implement
								long large_prime = Pollard_Rho((long)residue);
								if (large_prime != 1 && large_prime != residue)
								{
									if (!L_primes.ContainsKey(large_prime))
										L_primes.Add(large_prime, 1);
									else
										L_primes[large_prime]++;
									partials_found++;
									Console.Write('+');
								}
							}
							*/
								//Console.Write("L_prime: {0} ... ", residue);
					}
					/*
					if (thresholds2[i] == threshold
						&& GreatestCommonDivisor(residues2[i], afb_primorial) > a0)
					{
						thresholds2_c++;
						var expos = IsSmooth(residues2[i], afb_primorial);
						if (expos)
						{
							Console.Write("{0,7:F4} ...", thresholds2[i]);
							Console.WriteLine("residues2[{0}]: {1} ...", i, residues2[i]);
							smooths_found++;
						}
					}
					*/
				}	// for (int
				t1 = sw.ElapsedMilliseconds;
				//Console.WriteLine("thresholds[] scan time: {0:F1} s", (t1 - t0) / 1000.0);
				//Console.WriteLine(new String('-', 120));

				a0 += LIMIT2;
				A += 2;
			
			}
			var T_smooths = sw.Elapsed.TotalSeconds;

			Console.WriteLine("\n\nL_primes.List<>().Count(): {0} ... ", L_primes
				.Where(l => l.Value.Count() > 1).Count());
			

			var fp2 = new StreamWriter(string.Format("c{0}.partials", bigN_len));
			var fp4 = new StreamWriter(string.Format("c{0}.cycles", bigN_len));
			
			foreach (var lp in L_primes.Keys)
			{
				if (L_primes[lp].Count == 2)
				{
					BigInteger Qa = One;
					foreach (var str in L_primes[lp])
					{
						fp2.WriteLine("{0}", str);
						
						var tab_pos = str.IndexOf('\t');
						var spc_pos = str.IndexOf(' ');
						Qa *= Parse(str.Substring(tab_pos+1, spc_pos - tab_pos));
						Debug.Assert(!Qa.IsOne);
					}
					Qa *= InverseMod(lp, bigN);
					Qa %= bigN;
					
					var Qa_residue = Qa * Qa % bigN;
					string sign = "\t";
					if (Qa > (bigN >> 1))
					{
						Qa_residue = bigN - Qa_residue;
						sign = "-1 1 ";
					}
					
					var expos = GetPrimeFactors(Qa_residue, factor_base.ToArray());
					// Debug.Assert(expos != null);
					
					if (expos != null)
					{
						var expo_bits =  new BitArray((int)(FB_count * 2));
						
						fp4.Write("{0}\t{1}", Qa, sign);
						for (int i = 0; i < expos.Length; i++)
						{
							if (expos[i] > 0)
								fp4.Write("{0} {1} ", i+1, expos[i]);
								
							// set exponent values' bit, true if odd
							expo_bits.Set(i, (expos[i] & 1) == 1);	
						}
						fp4.WriteLine("0");
						cycles++;

						// Debugger.Break();
						Q_values.Add(Qa);
						roots.Add(Qa_residue);
						//expo_bits.Set(FB_count + matrix.Count, true);			// identity bit
						matrix.Add(expo_bits);
					}
					
				}
			}
			var T_sieve = sw.Elapsed.TotalSeconds;

			fp4.Close();
			fp2.Close();
			fp.Close();
			
			
		
			Console.WriteLine("\nsmooths_found:      {0} ...\npartials_found:     {1} ...", smooths_found, partials_found);
			Console.WriteLine("full cycles:        {0} ...", cycles);
			Console.WriteLine("thresholds1_c:      {0} ...\nthresholds2_c:      {1} ... ", thresholds1_c, thresholds2_c);
			Console.WriteLine("matrix.Length:      {0} ... ", matrix.Count);
			Console.WriteLine("matrix[0].Length:   {0} ... ", matrix[0].Length);
			Console.WriteLine("sieve time elapsed: {0:F1} s", T_sieve);
			Console.WriteLine("full relations:     {0:F1} #/sec", smooths_found / T_smooths);
			Console.WriteLine("recycled relations: {0:F1} #/sec\n\n{1}", cycles / (T_sieve - T_smooths), new String('-', 80));
			
			
			/*
			BitArray bits = new BitArray(FB_count * 2);
			foreach (var m_row in matrix)
			{
				bits.Xor(m_row);
			}
			for (int n = 0; n < bits.Length; n++)
				Console.Write("{0}", bits[n] ? '1' : '.');
			Console.WriteLine();
			*/
			Console.WriteLine("Processing matrix ... ");
			
			int mc = matrix.Count;
			
			for (int i = 0; i < mc; i++)
			{
				if (matrix[i].Count < mc + FB_count)
					matrix[i].Length = mc + FB_count;		// extend num columns in matrix row
				matrix[i].Set(FB_count + i, true);         // set identity column value = true
			}
			
			/*
			int discard = 0;
			int[] expo_counts = new int[FB_count];
			foreach (var m in matrix)
			{
				for (int fb_offset = 0; fb_offset < FB_count; fb_offset++)
					expo_counts[fb_offset] += m.Get(fb_offset) ? 1 : 0; 
			}

			for (int i = 0; i < FB_count; i++)
			{
				if (expo_counts[i] == 1)
				{
					for (int j = 0; j < matrix.Count; j++)
					{
						if (matrix[j].Get(i))
						{
							//matrix.RemoveAt(j);
							//Console.WriteLine("expo_counts[{0}]: {1} ...", i, expo_counts[i]);
							//Console.WriteLine("discarding relation[{0}] ... ", j);
						}
					}
					discard++;
				}
					
			}
			Console.WriteLine("{0} relations discarded ... ", discard);
			*/

			
			Gauss_Elimination(matrix);
			var T_matrix = sw.Elapsed.TotalSeconds;
			
			Console.WriteLine("matrix processing time: {0:F1} s\n", T_matrix - T_sieve);

			//Dump_Matrix(matrix);

			for (int i = mc-1; i >= 0; i--)			// number of rows
			{
				bool bNonNullFound = false;
				for (int j = 0; j < FB_count && !bNonNullFound; j++)
				{
					// test for null vector: all columns must be zero
					bNonNullFound |= matrix[i].Get(j);
				}
				
				//Console.WriteLine();
				//Debugger.Break();
				
				if (!bNonNullFound)
				{
					var T_depends = sw.Elapsed.TotalSeconds;
					
					Console.WriteLine($"trying dependency row [{i}]");
					// calculate smooth number from exponents, should be a perfect square
					BigInteger x = BigInteger.One, y = BigInteger.One;
					for (int j = 0; j < FB_count; j++)
					{
						//Console.Write("{0}", matrix[i].Get(j + FB_count) ? '1' : '.');
						if (matrix[i].Get(j + FB_count))
						{
							y *= Q_values[j];
							x *= roots[j];
						}
					}
					var T_sqrt = sw.Elapsed.TotalSeconds;
					double T_sqrt2 = 0;
					
					if (!y.IsOne)
					{
						var sqrt_x = SquareRoot(x);
						T_sqrt2 = sw.Elapsed.TotalSeconds;

						if (x.Equals(sqrt_x * sqrt_x))
						{
							Debug.Assert(x.Equals(sqrt_x * sqrt_x));
							var P = BigInteger.GreatestCommonDivisor(bigN, y - sqrt_x);
							var Q = BigInteger.GreatestCommonDivisor(bigN, y + sqrt_x);

							if ( !(P.IsOne || Q.IsOne || P.Equals(bigN) || Q.Equals(bigN)) )
							{
								Console.WriteLine("Factors are P: {0} ... Q: {1} ... ", P, Q);
								break;
							}
						}
					}					
					Console.WriteLine("T_sqrt - T_depends: {0:F1} s\nT_sqrt2 - T_sqrt:   {1:F1} s", 
						T_sqrt - T_depends, T_sqrt2 - T_sqrt);
				}
			}
			Console.Write("\n\nCtrl-C: ");
			Console.ReadLine();


			
			sw.Restart();
			{
				int BigThree = (int)Math.Pow(3.0, 13.0);
				BigInteger BigThird = Pow(3, BigThree);
				BigThree *= 3;
				BigThird += Pow(3, BigThree);
				BigThird += 1;
				
				Console.WriteLine("\n\nLog10(3^(3^14) + 3^(3^13) + 1): {0}", Log10(BigThird));
			}
			sw.Stop();
			Console.WriteLine("BigThird took {0:F1} secs.", sw.Elapsed.TotalSeconds);
        }
    }
}
